#
# This file is part of the Boomerang Decompiler.
#
# See the file "LICENSE.TERMS" for information on usage and
# redistribution of this file, and for a DISCLAIMER OF ALL
# WARRANTIES.
#

ENDIANNESS BIG;


# General Purpose registers

INTEGER %g0[32] -> 0;
INTEGER %g1[32] -> 1;
INTEGER %g2[32] -> 2;
INTEGER %g3[32] -> 3;
INTEGER %g4[32] -> 4;
INTEGER %g5[32] -> 5;
INTEGER %g6[32] -> 6;
INTEGER %g7[32] -> 7;
INTEGER %g8[32] -> 8;
INTEGER %g9[32] -> 9;
INTEGER %g10[32] -> 10;
INTEGER %g11[32] -> 11;
INTEGER %g12[32] -> 12;
INTEGER %g13[32] -> 13;
INTEGER %g14[32] -> 14;
INTEGER %g15[32] -> 15;
INTEGER %g16[32] -> 16;
INTEGER %g17[32] -> 17;
INTEGER %g18[32] -> 18;
INTEGER %g19[32] -> 19;
INTEGER %g20[32] -> 20;
INTEGER %g21[32] -> 21;
INTEGER %g22[32] -> 22;
INTEGER %g23[32] -> 23;
INTEGER %g24[32] -> 24;
INTEGER %g25[32] -> 25;
INTEGER %g26[32] -> 26;
INTEGER %g27[32] -> 27;
INTEGER %g28[32] -> 28;
INTEGER %g29[32] -> 29;
INTEGER %g30[32] -> 30;
INTEGER %g31[32] -> 31;

# FP registers
FLOAT %f0[64] -> 32;
FLOAT %f1[64] -> 33;
FLOAT %f2[64] -> 34;
FLOAT %f3[64] -> 35;
FLOAT %f4[64] -> 36;
FLOAT %f5[64] -> 37;
FLOAT %f6[64] -> 38;
FLOAT %f7[64] -> 39;
FLOAT %f8[64] -> 40;
FLOAT %f9[64] -> 41;
FLOAT %f10[64] -> 42;
FLOAT %f11[64] -> 43;
FLOAT %f12[64] -> 44;
FLOAT %f13[64] -> 45;
FLOAT %f14[64] -> 46;
FLOAT %f15[64] -> 47;
FLOAT %f16[64] -> 48;
FLOAT %f17[64] -> 49;
FLOAT %f18[64] -> 50;
FLOAT %f19[64] -> 51;
FLOAT %f20[64] -> 52;
FLOAT %f21[64] -> 53;
FLOAT %f22[64] -> 54;
FLOAT %f23[64] -> 55;
FLOAT %f24[64] -> 56;
FLOAT %f25[64] -> 57;
FLOAT %f26[64] -> 58;
FLOAT %f27[64] -> 59;
FLOAT %f28[64] -> 60;
FLOAT %f29[64] -> 61;
FLOAT %f30[64] -> 62;
FLOAT %f31[64] -> 63;

# Vector registers
INTEGER %VRSAVE[32] -> 300;
INTEGER %VSCR[32] -> 301;
INTEGER %VR0[128] -> 302;
INTEGER %VR1[128] -> 303;
INTEGER %VR2[128] -> 304;
INTEGER %VR3[128] -> 305;
INTEGER %VR4[128] -> 306;
INTEGER %VR5[128] -> 307;
INTEGER %VR6[128] -> 308;
INTEGER %VR7[128] -> 309;
INTEGER %VR8[128] -> 310;
INTEGER %VR9[128] -> 311;
INTEGER %VR10[128] -> 312;
INTEGER %VR11[128] -> 313;
INTEGER %VR12[128] -> 314;
INTEGER %VR13[128] -> 315;
INTEGER %VR14[128] -> 316;
INTEGER %VR15[128] -> 317;
INTEGER %VR16[128] -> 318;
INTEGER %VR17[128] -> 319;
INTEGER %VR18[128] -> 320;
INTEGER %VR19[128] -> 321;
INTEGER %VR20[128] -> 322;
INTEGER %VR21[128] -> 323;
INTEGER %VR22[128] -> 324;
INTEGER %VR23[128] -> 325;
INTEGER %VR24[128] -> 326;
INTEGER %VR25[128] -> 327;
INTEGER %VR26[128] -> 328;
INTEGER %VR27[128] -> 329;
INTEGER %VR28[128] -> 330;
INTEGER %VR29[128] -> 331;
INTEGER %VR30[128] -> 332;
INTEGER %VR31[128] -> 333;

# Condition Registers (contains %CR0 to %CR7)
INTEGER %CR[32] -> 100;
INTEGER %CR0[4] -> 64 SHARES %CR@[0..3];
INTEGER %CR1[4] -> 65 SHARES %CR@[4..7];
INTEGER %CR2[4] -> 66 SHARES %CR@[8..11];
INTEGER %CR3[4] -> 67 SHARES %CR@[12..15];
INTEGER %CR4[4] -> 68 SHARES %CR@[16..19];
INTEGER %CR5[4] -> 69 SHARES %CR@[20..23];
INTEGER %CR6[4] -> 70 SHARES %CR@[24..27];
INTEGER %CR7[4] -> 71 SHARES %CR@[28..31];


INTEGER %LR[32]  -> -1;     # Link Register
INTEGER %CTR[32] -> -1;     # Count Register

INTEGER %XER[32] -> 200; # Fixed point exeption register
INTEGER %XERSO[1] -> 201 SHARES %XER@[31..31];
INTEGER %XEROV[1] -> 202 SHARES %XER@[30..30];
INTEGER %XERCA[1] -> 203 SHARES %XER@[29..29];

INTEGER %pc[32] -> -1;



SETXER(value) {
    *32* %XER := value
    *1* %XERCA := %XER@[29:29]
    *1* %XEROV := %XER@[30:30]
    *1* %XERSO := %XER@[31:31]
};

ADDFLAGSX(result, op1, op2) {
    *1*  %XERCA := ((op1@[31:31]) & (op2@[31:31])) | (~(result@[31:31]) & ((op1@[31:31]) | (op2@[31:31])))
    *1*  %XER@[29:29] := %XERCA
};

ADDFLAGSX0(result, op1, op2) {
    *1* %XERCA := ((op1@[31:31]) & (op2@[31:31])) | (~(result@[31:31]) & ((op1@[31:31]) | (op2@[31:31])))
    *1* %XER@[29:29] := %XERCA
    *1* %CR0@[0:0] := %XERSO
    *1* %CR0@[1:1] := [result = 0?1:0]
    *1* %CR0@[2:2] := [result > 0?1:0]
    *1* %CR0@[3:3] := [result < 0?1:0]
};

SUBFLAGSX(result, op1, op2) {
    *1*  %XERCA := (~(op1@[31:31]) & (op2@[31:31])) | ((result@[31:31]) & (~(op1@[31:31]) | (op2@[31:31])))
    *1*  %XER@[29:29] := %XERCA
};

SUBFLAGS0(result) {
    *1* %CR0@[0:0] := %XERSO
    *1* %CR0@[1:1] := [result = 0?1:0]
    *1* %CR0@[2:2] := [result > 0?1:0]
    *1* %CR0@[3:3] := [result < 0?1:0]
};

SUBFLAGSX0(result, op1, op2) {
    *1* %XERCA := (~(op1@[31:31]) & (op2@[31:31])) | ((result@[31:31]) & (~(op1@[31:31]) | (op2@[31:31])))
    *1* %XER@[29:29] := %XERCA
    *1* %CR0@[0:0] := %XERSO
    *1* %CR0@[1:1] := [result = 0?1:0]
    *1* %CR0@[2:2] := [result > 0?1:0]
    *1* %CR0@[3:3] := [result < 0?1:0]
};

SETFLAGS0(rd) {
    *1* %CR0@[0:0] := %XERSO            # Note: these are non IBM bit numbers; LT is most significant bit (PPC bit 0)
    *1* %CR0@[1:1] := [rd = 0?1:0]
    *1* %CR0@[2:2] := [rd > 0?1:0]
    *1* %CR0@[3:3] := [rd < 0?1:0]
};



SUBFLAGSNL(op1, op2, crfd) {
    # Set flags in Logical (unsigned) fashion
    *32* crfd = 0 => %CR0@[3:3] := op1 <u op2       *32* crfd = 0 => %CR0@[2:2] := op1 >u op2       *32* crfd = 0 => %CR0@[1:1] := op1 =  op2
    *32* crfd = 1 => %CR1@[3:3] := op1 <u op2       *32* crfd = 1 => %CR1@[2:2] := op1 >u op2       *32* crfd = 1 => %CR1@[1:1] := op1 =  op2
    *32* crfd = 2 => %CR2@[3:3] := op1 <u op2       *32* crfd = 2 => %CR2@[2:2] := op1 >u op2       *32* crfd = 2 => %CR2@[1:1] := op1 =  op2
    *32* crfd = 3 => %CR3@[3:3] := op1 <u op2       *32* crfd = 3 => %CR3@[2:2] := op1 >u op2       *32* crfd = 3 => %CR3@[1:1] := op1 =  op2
    *32* crfd = 4 => %CR4@[3:3] := op1 <u op2       *32* crfd = 4 => %CR4@[2:2] := op1 >u op2       *32* crfd = 4 => %CR4@[1:1] := op1 =  op2
    *32* crfd = 5 => %CR5@[3:3] := op1 <u op2       *32* crfd = 5 => %CR5@[2:2] := op1 >u op2       *32* crfd = 5 => %CR5@[1:1] := op1 =  op2
    *32* crfd = 6 => %CR6@[3:3] := op1 <u op2       *32* crfd = 6 => %CR6@[2:2] := op1 >u op2       *32* crfd = 6 => %CR6@[1:1] := op1 =  op2
    *32* crfd = 7 => %CR7@[3:3] := op1 <u op2       *32* crfd = 7 => %CR7@[2:2] := op1 >u op2       *32* crfd = 7 => %CR7@[1:1] := op1 =  op2
};

SUBFLAGSNS(op1, op2, crfd) {
    # Set flags in signed fashion
    *32* crfd = 0 => %CR0@[3:3] := op1 < op2        *32* crfd = 0 => %CR0@[2:2] := op1 > op2        *32* crfd = 0 => %CR0@[1:1] := op1 = op2
    *32* crfd = 1 => %CR1@[3:3] := op1 < op2        *32* crfd = 1 => %CR1@[2:2] := op1 > op2        *32* crfd = 1 => %CR1@[1:1] := op1 = op2
    *32* crfd = 2 => %CR2@[3:3] := op1 < op2        *32* crfd = 2 => %CR2@[2:2] := op1 > op2        *32* crfd = 2 => %CR2@[1:1] := op1 = op2
    *32* crfd = 3 => %CR3@[3:3] := op1 < op2        *32* crfd = 3 => %CR3@[2:2] := op1 > op2        *32* crfd = 3 => %CR3@[1:1] := op1 = op2
    *32* crfd = 4 => %CR4@[3:3] := op1 < op2        *32* crfd = 4 => %CR4@[2:2] := op1 > op2        *32* crfd = 4 => %CR4@[1:1] := op1 = op2
    *32* crfd = 5 => %CR5@[3:3] := op1 < op2        *32* crfd = 5 => %CR5@[2:2] := op1 > op2        *32* crfd = 5 => %CR5@[1:1] := op1 = op2
    *32* crfd = 6 => %CR6@[3:3] := op1 < op2        *32* crfd = 6 => %CR6@[2:2] := op1 > op2        *32* crfd = 6 => %CR6@[1:1] := op1 = op2
    *32* crfd = 7 => %CR7@[3:3] := op1 < op2        *32* crfd = 7 => %CR7@[2:2] := op1 > op2        *32* crfd = 7 => %CR7@[1:1] := op1 = op2
};

SETFFLAGSN(op1, op2, crfd) {
    # Set flags according to floating point compare
    *32* crfd = 0 => %CR0@[3:3] := op1 < op2        *32* crfd = 0 => %CR0@[2:2] := op1 > op2        *32* crfd = 0 => %CR0@[1:1] := op1 = op2
    *32* crfd = 1 => %CR1@[3:3] := op1 < op2        *32* crfd = 1 => %CR1@[2:2] := op1 > op2        *32* crfd = 1 => %CR1@[1:1] := op1 = op2
    *32* crfd = 2 => %CR2@[3:3] := op1 < op2        *32* crfd = 2 => %CR2@[2:2] := op1 > op2        *32* crfd = 2 => %CR2@[1:1] := op1 = op2
    *32* crfd = 3 => %CR3@[3:3] := op1 < op2        *32* crfd = 3 => %CR3@[2:2] := op1 > op2        *32* crfd = 3 => %CR3@[1:1] := op1 = op2
    *32* crfd = 4 => %CR4@[3:3] := op1 < op2        *32* crfd = 4 => %CR4@[2:2] := op1 > op2        *32* crfd = 4 => %CR4@[1:1] := op1 = op2
    *32* crfd = 5 => %CR5@[3:3] := op1 < op2        *32* crfd = 5 => %CR5@[2:2] := op1 > op2        *32* crfd = 5 => %CR5@[1:1] := op1 = op2
    *32* crfd = 6 => %CR6@[3:3] := op1 < op2        *32* crfd = 6 => %CR6@[2:2] := op1 > op2        *32* crfd = 6 => %CR6@[1:1] := op1 = op2
    *32* crfd = 7 => %CR7@[3:3] := op1 < op2        *32* crfd = 7 => %CR7@[2:2] := op1 > op2        *32* crfd = 7 => %CR7@[1:1] := op1 = op2
};


MR          rd, rs              *32* rd := rs;
LIS         rd, val             *32* rd := (val << 16);
LI          rd, val             *32* rd := sgnex(16, 32, val);

# Arithmetic operations

ADD         rd, ra, rb          *32* rd := ra + rb;
ADDq        rd, ra, rb          *32* rd := ra + rb              SETFLAGS0(rd);

ADDE        rd, ra, rb          *32* rd := ra + rb + %XERCA;
ADDEq       rd, ra, rb          *32* rd := ra + rb + %XERCA     SETFLAGS0(rd);

ADDI        rd, rs, simm        *32* rd := rs + sgnex(16, 32, simm);
ADDIC       rd, rs, simm        *32* rd := rs + simm            ADDFLAGSX(rd, rs, simm);    # Set carry
ADDICq      rd, rs, simm        *32* rd := rs + simm            ADDFLAGSX0(rd, rs, simm);   # Set carry and CR0
ADDIS       rd, rs, simm        *32* rd := rs + (simm << 16);

ADDME       rd, ra              *32* rd := ra + %XERCA - 1;
ADDMEq      rd, ra              *32* rd := ra + %XERCA - 1      SETFLAGS0(rd);

ADDZE       rd, ra              *32* rd := ra + %XERCA;
ADDZEq      rd, ra              *32* rd := ra + %XERCA          SETFLAGS0(rd);

DIVW        rd, ra, rb          *32* rd := ra / rb;
DIVWq       rd, ra, rb          *32* rd := ra / rb              SETFLAGS0(rd);

DIVWU       rd, ra, rb          *32* rd := ra / rb;
DIVWUq      rd, ra, rb          *32* rd := ra / rb              SETFLAGS0(rd);

EXTSB       rd, ra              *32* rd := sgnex(8, 32, ra);
EXTSBq      rd, ra              *32* rd := sgnex(8, 32, ra)     SETFLAGS0(rd);

MULLI       rd, ra, simm        *32* rd := ra * sgnex(16, 32, simm);
MULLW       rd, ra, rb          *32* rd := ra * rb;
MULLWq      rd, ra, rb          *32* rd := ra * rb              SETFLAGS0(rd);

SUBF        rd, ra, rb          *32* rd := rb - ra;
SUBFE       rd, ra, rb          *32* rd := rb + %XERCA - ra;

SUBFIC      rd, ra, simm        *32* rd := simm - ra            SUBFLAGSX(rd, simm, ra);
SUBFC       rd, ra, rb          *32* rd := rb - ra              SUBFLAGSX(rd, rb, ra);

SUBFCQ      rd, ra, rb          *32* rd := rb - ra              SUBFLAGSX0(rd, rb, ra);
SUBFCO      rd, ra, rb          *32* rd := rb - ra              SUBFLAGSX(rd, rb, ra);  # Also supposed to set overflow bits
SUBFCOQ     rd, ra, rb          *32* rd := rb - ra              SUBFLAGSX0(rd, rb, ra); # Also supposed to set overflow bits

NOP                             _;


# Logical ops
NEG         rd, ra              *32* rd := 0 - ra;
NEGq        rd, ra              *32* rd := 0 - ra               SETFLAGS0(rd);

AND         rd, ra, rb          *32* rd := ra & rb;
OR          rd, ra, rb          *32* rd := ra | rb;
XOR         rd, ra, rb          *32* rd := ra ^ rb;
ANDq        rd, ra, rb          *32* rd := ra & rb              SETFLAGS0(rd);
ORq         rd, ra, rb          *32* rd := ra | rb              SETFLAGS0(rd);
XORq        rd, ra, rb          *32* rd := ra ^ rb              SETFLAGS0(rd);

ANDIq       rd, rs, uimm        *32* rd := rs & uimm            SETFLAGS0(rd);  # Only ANDIq sets flags
ORI         rd, rs, uimm        *32* rd := rs | uimm;
XORI        rd, rs, uimm        *32* rd := rs ^ uimm;

ANDISq      rd, rs, uimm        *32* rd := rs & (uimm << 16)    SETFLAGS0(rd);  # Only ANDISq sets flags
ORIS        rd, rs, uimm        *32* rd := rs | (uimm << 16);
XORIS       rd, rs, uimm        *32* rd := rs ^ (uimm << 16);

NAND        rd, ra, rb          *32* rd := ~(ra & rb);
NOR         rd, ra, rb          *32* rd := ~(ra | rb);
EQV         rd, ra, rb          *32* rd := ~(ra ^ rb);
NANDq       rd, ra, rb          *32* rd := ~(ra & rb)           SETFLAGS0(rd);
NORq        rd, ra, rb          *32* rd := ~(ra | rb)           SETFLAGS0(rd);
EQVq        rd, ra, rb          *32* rd := ~(ra ^ rb)           SETFLAGS0(rd);

# Note: no ANDI or ANDIS (ANDIq and ANDISq instead)
# Note: no XORCR/XORCRq
ANDC        rd, ra, rb          *32* rd := ra & (~rb);
ORC         rd, ra, rb          *32* rd := ra | (~rb);
ANDCq       rd, ra, rb          *32* rd := ra & (~rb)           SETFLAGS0(rd);
ORCq        rd, ra, rb          *32* rd := ra | (~rb)           SETFLAGS0(rd);


# Shifts and rotates

# Note: SRAW/SRAWI also set the carry flag (%XERCA) in some weird way
SLW         Rd, Rs, op2         *32* Rd := Rs <<  op2;
SRW         Rd, Rs, op2         *32* Rd := Rs >>  op2;
SRAW        Rd, Rs, op2         *32* Rd := Rs >>A op2;
SRAWI       Rd, Rs, op2         *32* Rd := Rs >>A op2;

SLWq        Rd, Rs, op2         *32* Rd := Rs <<  op2           SETFLAGS0(Rd);
SRWq        Rd, Rs, op2         *32* Rd := Rs >>  op2           SETFLAGS0(Rd);
SRAWq       Rd, Rs, op2         *32* Rd := Rs >>A op2           SETFLAGS0(Rd);
SRAWIq      Rd, Rs, op2         *32* Rd := Rs >>A op2           SETFLAGS0(Rd);

RLWINM      ra, rs, uimm, beg, end
        *32* tmp_mask := (1 << (32 - beg)) - (1 << (31 - end))
        *32* ra := rs rl uimm & tmp_mask                       # rl = rotate left
;

RLWINMq     ra, rs, uimm, beg, end
        *32* tmp_mask := (1 << (32 - beg)) - (1 << (31 - end))
        *32* ra := rs rl uimm & tmp_mask                       # rl = rotate left
        SETFLAGS0(ra)
;

RLWIMI      ra, rs, uimm, beg, end
        *32* tmp_mask := (1 << (32 - beg)) - (1 << (31 - end))
        *32* tmp_r := rs rl uimm & tmp_mask
        *32* ra := rs | (ra & ~tmp_mask)
;

RLWIMIq     ra, rs, uimm, beg, end
        *32* tmp_mask := (1 << (32 - beg)) - (1 << (31 - end))
        *32* tmp_r := rs rl uimm & tmp_mask
        *32* ra := rs | (ra & ~tmp_mask)
        SETFLAGS0(ra)
;


# Memory access. rA is passed twice; as part of eaddr, and by itself for the U versions (update rA)

LWZ         dest, src               *32* dest := src;
LWZX        dest, src               *32* dest := zfill(16, 32, src);
LBZ         rd, eaddr, ra           *32* rd := zfill(8, 32, m[eaddr]);
LHZ         rd, eaddr, ra           *32* rd := zfill(16, 32, m[eaddr]);
LHA         rd, eaddr, ra           *32* rd := sgnex(16, 32, m[eaddr]);
LBZX        rd, eaddr, ra           *32* rd := zfill(8, 32, m[eaddr]);

STWU        src, dest               *32* dest := src    *32* src := addr(dest);
STW         src, dest               *32* dest := src;
STWX        rs, eaddr               *32* m[eaddr] := rs;
STH         rs, eaddr, ra           *16* m[eaddr] := truncs(32, 16, rs);
STHX        rs, eaddr               *16* m[eaddr] := truncs(32, 16, rs);
STB         rs, eaddr, ra           *8*  m[eaddr] := truncs(32, 8, rs);
STBX        rs, eaddr               *8*  m[eaddr] := truncs(32, 8, rs);


# Multi word load and store

LMW         rd, eaddr, d
        *32* tmp := 0
        *32* d <=  0 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <=  0 => tmp := tmp + 1
        *32* d <=  1 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <=  1 => tmp := tmp + 1
        *32* d <=  2 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <=  2 => tmp := tmp + 1
        *32* d <=  3 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <=  3 => tmp := tmp + 1
        *32* d <=  4 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <=  4 => tmp := tmp + 1
        *32* d <=  5 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <=  5 => tmp := tmp + 1
        *32* d <=  6 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <=  6 => tmp := tmp + 1
        *32* d <=  7 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <=  7 => tmp := tmp + 1
        *32* d <=  8 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <=  8 => tmp := tmp + 1
        *32* d <=  9 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <=  9 => tmp := tmp + 1
        *32* d <= 10 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <= 10 => tmp := tmp + 1
        *32* d <= 11 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <= 11 => tmp := tmp + 1
        *32* d <= 12 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <= 12 => tmp := tmp + 1
        *32* d <= 13 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <= 13 => tmp := tmp + 1
        *32* d <= 14 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <= 14 => tmp := tmp + 1
        *32* d <= 15 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <= 15 => tmp := tmp + 1
        *32* d <= 16 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <= 16 => tmp := tmp + 1
        *32* d <= 17 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <= 17 => tmp := tmp + 1
        *32* d <= 18 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <= 18 => tmp := tmp + 1
        *32* d <= 19 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <= 19 => tmp := tmp + 1
        *32* d <= 20 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <= 20 => tmp := tmp + 1
        *32* d <= 21 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <= 21 => tmp := tmp + 1
        *32* d <= 22 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <= 22 => tmp := tmp + 1
        *32* d <= 23 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <= 23 => tmp := tmp + 1
        *32* d <= 24 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <= 24 => tmp := tmp + 1
        *32* d <= 25 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <= 25 => tmp := tmp + 1
        *32* d <= 26 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <= 26 => tmp := tmp + 1
        *32* d <= 27 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <= 27 => tmp := tmp + 1
        *32* d <= 28 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <= 28 => tmp := tmp + 1
        *32* d <= 29 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <= 29 => tmp := tmp + 1
        *32* d <= 30 => r[d + tmp] := m[eaddr + (tmp*4)]        *32* d <= 30 => tmp := tmp + 1
        *32* d <= 31 => r[d + tmp] := m[eaddr + (tmp*4)]
;

STMW        rs, eaddr, s
        *32* tmp := 0
        *32* s <=  0 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <=  0 => tmp := tmp + 1
        *32* s <=  1 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <=  1 => tmp := tmp + 1
        *32* s <=  2 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <=  2 => tmp := tmp + 1
        *32* s <=  3 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <=  3 => tmp := tmp + 1
        *32* s <=  4 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <=  4 => tmp := tmp + 1
        *32* s <=  5 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <=  5 => tmp := tmp + 1
        *32* s <=  6 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <=  6 => tmp := tmp + 1
        *32* s <=  7 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <=  7 => tmp := tmp + 1
        *32* s <=  8 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <=  8 => tmp := tmp + 1
        *32* s <=  9 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <=  9 => tmp := tmp + 1
        *32* s <= 10 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <= 10 => tmp := tmp + 1
        *32* s <= 11 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <= 11 => tmp := tmp + 1
        *32* s <= 12 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <= 12 => tmp := tmp + 1
        *32* s <= 13 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <= 13 => tmp := tmp + 1
        *32* s <= 14 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <= 14 => tmp := tmp + 1
        *32* s <= 15 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <= 15 => tmp := tmp + 1
        *32* s <= 16 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <= 16 => tmp := tmp + 1
        *32* s <= 17 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <= 17 => tmp := tmp + 1
        *32* s <= 18 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <= 18 => tmp := tmp + 1
        *32* s <= 19 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <= 19 => tmp := tmp + 1
        *32* s <= 20 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <= 20 => tmp := tmp + 1
        *32* s <= 21 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <= 21 => tmp := tmp + 1
        *32* s <= 22 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <= 22 => tmp := tmp + 1
        *32* s <= 23 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <= 23 => tmp := tmp + 1
        *32* s <= 24 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <= 24 => tmp := tmp + 1
        *32* s <= 25 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <= 25 => tmp := tmp + 1
        *32* s <= 26 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <= 26 => tmp := tmp + 1
        *32* s <= 27 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <= 27 => tmp := tmp + 1
        *32* s <= 28 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <= 28 => tmp := tmp + 1
        *32* s <= 29 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <= 29 => tmp := tmp + 1
        *32* s <= 30 => m[eaddr + (tmp*4)] := r[s + tmp]        *32* s <= 30 => tmp := tmp + 1
        *32* s <= 31 => m[eaddr + (tmp*4)] := r[s + tmp]
;


# Floating point loads
LFD         fd, eaddr, ra           *64* fd := m[eaddr];
LFDU        fd, eaddr, ra           *64* fd := m[eaddr]                     *32* ra := eaddr;
LFDX        fd, eaddr, ra           *64* fd := m[eaddr];
LFDUX       fd, eaddr, ra           *64* fd := m[eaddr]                     *32* ra := eaddr;
LFS         fd, eaddr, ra           *32* fd := fsize(32, 64, m[eaddr]);
LFSU        fd, eaddr, ra           *32* fd := fsize(32, 64, m[eaddr])      *32* ra := eaddr;
LFSX        fd, eaddr, ra           *64* fd := fsize(32, 64, m[eaddr]);
LFSUX       fd, eaddr, ra           *32* fd := fsize(32, 64, m[eaddr])      *32* ra := eaddr;

# Floating point stores
STFD        fd, eaddr, ra           *64* m[eaddr] := fd;
STFDU       fd, eaddr, ra           *64* m[eaddr] := fd                     *32* ra := eaddr;
STFDX       fd, eaddr, ra           *64* m[eaddr] := fd;
STFDUX      fd, eaddr, ra           *64* m[eaddr] := fd                     *32* ra := eaddr;
STFS        fd, eaddr, ra           *32* m[eaddr] := fsize(64, 32, fd);
STFSU       fd, eaddr, ra           *32* m[eaddr] := fsize(64, 32, fd)      *32* ra := eaddr;
STFSX       fd, eaddr, ra           *32* m[eaddr] := fsize(64, 32, fd);
STFSUX      fd, eaddr, ra           *32* m[eaddr] := fsize(64, 32, fd)      *32* ra := eaddr;


BALLR                               *32* %pc := %LR;
MFLR        rd                      *32* rd := %LR;
MFCR        rd                      *32* rd := (%CR0 << 28) + (%CR1 << 24)
                                             + (%CR2 << 20) + (%CR3 << 16)
                                             + (%CR4 << 12) + (%CR5 <<  8)
                                             + (%CR6 <<  4) + (%CR7);

MFSPR       rd, spr                 *32* rd := [spr & 1 ? [spr >> 3 & 1 ? %CTR : %XER] : %LR];
MTLR        rs                      *32* %LR := rs;
MTXER       rs                      SETXER(rs);
MTCTR       rs                      *32* %CTR := rs;

BL          reloc                   *32* %LR := %pc + 4
                                    *32* %pc := reloc;

BLR                                 _; # Semantics are hard-coded (see CapstonePPCDecoder.ssl)

# Comparisons. Ignore XER[SO] for now.
CMPI        crfd, ra, simm          SUBFLAGSNS(ra, simm, crfd);
CMPLI       crfd, ra, uimm          SUBFLAGSNL(ra, uimm, crfd);
CMP         crfd, ra, rb            SUBFLAGSNS(ra, rb, crfd);
CMPL        crfd, ra, rb            SUBFLAGSNL(ra, rb, crfd);

FCMPO       crfd, fa, fb            SETFFLAGSN(fa, fb,crfd);    # Difference between O and U forms is
FCMPU       crfd, fa, fb            SETFFLAGSN(fa, fb,crfd);    # in exception handling


# condition register manipulation
CRAND           d, a, b             *1* d := a & b;
CROR            d, a, b             *1* d := a | b;
CRXOR           d, a, b             *1* d := a ^ b;
CRNAND          d, a, b             *1* d := ~(a & b);
CRNOR           d, a, b             *1* d := ~(a | b);
CREQV           d, a, b             *1* d := ~(a ^ b);
CRANDC          d, a, b             *1* d := a & (~b);
CRORC           d, a, b             *1* d := a | (~b);
# Note: no CRXORC


# Floating point operations
FMR             fd, fb            *64* fd := fb;
FMRq            fd, fb            *64* fd := fb;

FNEG            fd, fb            *64* fd := 0.0 -f fb;
FNEGq           fd, fb            *64* fd := 0.0 -f fb;

FRSP            fd, fb            *32* tmpf := fsize(64, 32, fb)        *64* fd := fsize(32, 64, tmpf);
FRSPq           fd, fb            *32* tmpf := fsize(64, 32, fb)        *64* fd := fsize(32, 64, tmpf);

FCTIW           fd, fb            *64* fd := zfill(32, 64, ftoi(64, 32, fb));
FCTIWq          fd, fb            *64* fd := zfill(32, 64, ftoi(64, 32, fb));

# The following are supposed to round towards 0 as well
FCTIWZ          fd, fb            *64* fd := zfill(32, 64, ftoi(64, 32, fb));
FCTIWZq         fd, fb            *64* fd := zfill(32, 64, ftoi(64, 32, fb));

FADD            fd, fa, fb        *64* fd := fa +f fb;
FADDq           fd, fa, fb        *64* fd := fa +f fb;        # Note: floating point flags not implemented yet

FADDS           fd, fa, fb        *64* fd := fa +f fb;        # Note: may only operate on 32 bits of precision
FADDSq          fd, fa, fb        *64* fd := fa +f fb;

FSUB            fd, fa, fb        *64* fd := fa -f fb;
FSUBq           fd, fa, fb        *64* fd := fa -f fb;

FSUBS           fd, fa, fb        *64* fd := fa -f fb;        # Note as above
FSUBSq          fd, fa, fb        *64* fd := fa -f fb;

FDIV            fd, fa, fb        *64* fd := fa /f fb;
FDIVq           fd, fa, fb        *64* fd := fa /f fb;

FDIVS           fd, fa, fb        *64* fd := fa /f fb;        # Note: only operates on 64/32 bits of precision
FDIVSq          fd, fa, fb        *64* fd := fa /f fb;        # Yet result is in 64-bit format

# conditional branch
# MVE: Not sure if I have the bit numbers round the right way (is LT 3 or 0?)
#
#CONDBR :=     { "%CR0@[3:3]",   "~%CR0@[2:2]",  "%CR0@[1:1]",   "~%CR0@[3:3]",
#                "%CR0@[2:2]",   "~%CR0@[3:3]",  "~%CR0@[1:1]",  "~%CR0@[2:2]",
#                "%CR0@[0:0]",   "~%CR0@[0:0]",  "%CR0@[0:0]",   "~%CR0@[0:0]"};
#
# Note: The semantics for the instructions below are still hard-coded so they are not defined explicitly.

# BRCONDS[IDX]    BIcr, reloc     *32* %pc := [(CONDBR[IDX] = 1) ? %pc+reloc : %pc];
blt     BIcr, reloc     _;
ble     BIcr, reloc     _;
beq     BIcr, reloc     _;
bge     BIcr, reloc     _;
bgt     BIcr, reloc     _;
bnl     BIcr, reloc     _;
bne     BIcr, reloc     _;
bng     BIcr, reloc     _;
bso     BIcr, reloc     _;
bns     BIcr, reloc     _;
bun     BIcr, reloc     _;
bnu     BIcr, reloc     _;

# BRCONDSCTR[IDX] BIcr            *32* %pc := [(CONDBR[IDX] = 1) ? %CTR : %pc];
bltctr  BIcr            _;
blectr  BIcr            _;
beqctr  BIcr            _;
bgectr  BIcr            _;
bgtctr  BIcr            _;
bnlctr  BIcr            _;
bnectr  BIcr            _;
bngctr  BIcr            _;
bsoctr  BIcr            _;
bnsctr  BIcr            _;
bunctr  BIcr            _;
bnuctr  BIcr            _;

# BRCONDSLR[IDX]  BIcr            *32* %pc := [(CONDBR[IDX] = 1) ? %LR : %pc];
bltlr  BIcr            _;
blelr  BIcr            _;
beqlr  BIcr            _;
bgelr  BIcr            _;
bgtlr  BIcr            _;
bnllr  BIcr            _;
bnelr  BIcr            _;
bnglr  BIcr            _;
bsolr  BIcr            _;
bnslr  BIcr            _;
bunlr  BIcr            _;
bnulr  BIcr            _;


# Trap instructions
TDI     cc, ra, simm    _;
TDGTI   ra, simm        _;
TDLTI   ra, simm        _;
TDNEI   ra, simm        _;

TWI     cc, ra, simm    _;
TWGTI   ra, simm        _;
TWLTI   ra, simm        _;
TWNEI   ra, simm        _;
