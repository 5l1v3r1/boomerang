
typedef int off_t;

int getopt(int argc, char *argv[], const char *optstring);


off_t lseek(int fildes, off_t offset, int whence);

int          access(const char *path, int amode);
unsigned int alarm(unsigned int seconds);
int          brk(void *addr);
int          chdir(const char *path);
int          chroot(const char *path);
int          chown(const char *path, uid_t owner, gid_t group);
int          close(int fildes);
size_t       confstr(int name, char *buf, size_t len);
char        *crypt (const char *key, const char *salt);
char        *ctermid(char *s);
char        *cuserid(char *s);
int          dup(int fildes);
int          dup2(int fildes, int fildes2);
void         encrypt(char block[64], int edflag);
int          execl(const char *path, const char *arg0, ...);
int          execle(const char *path, const char *arg0, ...);
int          execlp(const char *file, const char *arg0, ...);
int          execv(const char *path, char *argv[]);
int          execve(const char *path, char *argv[], char *envp[]);
int          execvp(const char *file, char *argv[]);
void        _exit(int status);
int          fchown(int fildes, uid_t owner, gid_t group);
int          fchdir(int fildes);
int          fdatasync(int fildes);
pid_t        fork(void);
long         fpathconf(int fildes, int name);
int          fsync(int fildes);
int          ftruncate(int fildes, off_t length);
char        *getcwd(char *buf, size_t size);
int          getdtablesize(void);
gid_t        getegid(void);
uid_t        geteuid(void);
gid_t        getgid(void);
int          getgroups(int gidgetsize, gid_t grouplist[]);
long         gethostid(void);
char        *getlogin(void);
int          getlogin_r(char *name, size_t namesize);
int          getopt(int argc, char *argv[], const char *optstring);
int          getpagesize(void);
char        *getpass(const char *prompt);
pid_t        getpgid(pid_t pid);
pid_t        getpgrp(void);
pid_t        getpid(void);
pid_t        getppid(void);
pid_t        getsid(pid_t pid);
uid_t        getuid(void);
char        *getwd(char *path_name);
int          isatty(int fildes);
int          lchown(const char *path, uid_t owner, gid_t group);
int          link(const char *path1, const char *path2);
int          lockf(int fildes, int function, off_t size);
off_t        lseek(int fildes, off_t offset, int whence);
int          nice(int incr);
long         pathconf(const char *path, int name);
int          pause(void);
int          pipe(int fildes[2]);
ssize_t      pread(int fildes, void *buf, size_t nbyte, off_t offset);
int          pthread_atfork(void (*prepare)(void), void (*parent)(void), void (*child)(void));
ssize_t      pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
ssize_t      read(int fildes, void *buf, size_t nbyte);
int          readlink(const char *path, char *buf, size_t bufsize);
int          rmdir(const char *path);
void        *sbrk(intptr_t incr);
int          setgid(gid_t gid);
int          setpgid(pid_t pid, pid_t pgid);
pid_t        setpgrp(void);
int          setregid(gid_t rgid, gid_t egid);
int          setreuid(uid_t ruid, uid_t euid);
pid_t        setsid(void);
int          setuid(uid_t uid);
unsigned int sleep(unsigned int seconds);
void         swab(const void *src, void *dest, ssize_t nbytes);
int          symlink(const char *path1, const char *path2);
void         sync(void);
long         sysconf(int name);
pid_t        tcgetpgrp(int fildes);
int          tcsetpgrp(int fildes, pid_t pgid_id);
int          truncate(const char *path, off_t length);
char        *ttyname(int fildes);
int          ttyname_r(int fildes, char *name, size_t namesize);
useconds_t   ualarm(useconds_t useconds, useconds_t interval);
int          unlink(const char *path);
int          usleep(useconds_t useconds);
pid_t        vfork(void);
ssize_t      write(int fildes, const void *buf, size_t nbyte);
